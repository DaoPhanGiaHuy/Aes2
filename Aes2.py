import PySimpleGUI as sg

# S-box và Inverse S-box cho AES
S_BOX = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
]

INV_S_BOX = [
    [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],
    [0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB],
    [0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E],
    [0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25],
    [0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92],
    [0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84],
    [0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06],
    [0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B],
    [0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73],
    [0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E],
    [0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B],
    [0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4],
    [0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F],
    [0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF],
    [0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61],
    [0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]
]

# Hàm mở rộng khóa AES (Key Expansion)
def key_expansion(key):
    Rcon = [
        [0x01, 0x00, 0x00, 0x00],
        [0x02, 0x00, 0x00, 0x00],
        [0x04, 0x00, 0x00, 0x00],
        [0x08, 0x00, 0x00, 0x00],
        [0x10, 0x00, 0x00, 0x00],
        [0x20, 0x00, 0x00, 0x00],
        [0x40, 0x00, 0x00, 0x00],
        [0x80, 0x00, 0x00, 0x00],
        [0x1B, 0x00, 0x00, 0x00],
        [0x36, 0x00, 0x00, 0x00]
    ]
    
    round_keys = [key]
    temp = [0] * 4

    # Process the key into the expanded key schedule
    for round in range(1, 11):  # AES uses 10 rounds
        # Get the last 4 bytes from the previous round key
        temp = round_keys[round - 1][12:16]
        
        # Rotate the word
        temp = temp[1:] + temp[:1]

        # SubBytes operation (using S-Box)
        temp = [S_BOX[b >> 4][b & 0x0F] for b in temp]

        # XOR with round constant (Rcon)
        temp[0] ^= Rcon[round - 1][0]
        
        # XOR with the first word of the last round key to get the first word of the new round key
        new_round_key = [
            [round_keys[round - 1][i][0] ^ temp[i] for i in range(4)]
        ]
        
        # Fill in the rest of the new round key
        for i in range(1, 4):
            new_round_key.append([
                round_keys[round - 1][i][j] ^ new_round_key[i - 1][j]
                for j in range(4)
            ])
        
        round_keys.append(new_round_key)
        
    return round_keys



# Hàm SubBytes và Inverse SubBytes
def sub_bytes(state):
    return [[S_BOX[b >> 4][b & 0x0F] for b in row] for row in state]

def inv_sub_bytes(state):
    return [[INV_S_BOX[b >> 4][b & 0x0F] for b in row] for row in state]

# Hàm ShiftRows và Inverse ShiftRows
def shift_rows(state):
    return [state[0],
            state[1][1:] + state[1][:1],
            state[2][2:] + state[2][:2],
            state[3][3:] + state[3][:3]]

def inv_shift_rows(state):
    return [state[0],
            state[1][-1:] + state[1][:-1],
            state[2][-2:] + state[2][:-2],
            state[3][-3:] + state[3][:-3]]

# Hàm MixColumns và Inverse MixColumns
def mix_columns(state):
    for i in range(4):
        a = state[i]
        state[i] = [
            gf_mul(a[0], 2) ^ gf_mul(a[3], 1) ^ gf_mul(a[2], 1) ^ gf_mul(a[1], 3),
            gf_mul(a[1], 2) ^ gf_mul(a[0], 1) ^ gf_mul(a[3], 1) ^ gf_mul(a[2], 3),
            gf_mul(a[2], 2) ^ gf_mul(a[1], 1) ^ gf_mul(a[0], 1) ^ gf_mul(a[3], 3),
            gf_mul(a[3], 2) ^ gf_mul(a[2], 1) ^ gf_mul(a[1], 1) ^ gf_mul(a[0], 3)
        ]
    return state

def inv_mix_columns(state):
    for i in range(4):
        a = state[i]
        state[i] = [
            gf_mul(a[0], 0x0E) ^ gf_mul(a[1], 0x0B) ^ gf_mul(a[2], 0x0D) ^ gf_mul(a[3], 0x09),
            gf_mul(a[0], 0x09) ^ gf_mul(a[1], 0x0E) ^ gf_mul(a[2], 0x0B) ^ gf_mul(a[3], 0x0D),
            gf_mul(a[0], 0x0D) ^ gf_mul(a[1], 0x09) ^ gf_mul(a[2], 0x0E) ^ gf_mul(a[3], 0x0B),
            gf_mul(a[0], 0x0B) ^ gf_mul(a[1], 0x0D) ^ gf_mul(a[2], 0x09) ^ gf_mul(a[3], 0x0E)
        ]
    return state

# Hàm nhân GF(2^8) cho MixColumns
def gf_mul(x, y):
    result = 0
    for i in range(8):
        if (y & 1) == 1:
            result ^= x
        high_bit_set = x & 0x80
        x = (x << 1) & 0xFF
        if high_bit_set:
            x ^= 0x1B
        y >>= 1
    return result

# Hàm AddRoundKey
def add_round_key(state, round_key):
    return [[state[i][j] ^ round_key[i][j] for j in range(4)] for i in range(4)]

# Hàm mở rộng khóa AES (Key Expansion)
def key_expansion(key):
    Rcon = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
    key_schedule = [list(key[i:i + 4]) for i in range(0, 16, 4)]  # split the key into 4-word blocks

    for round in range(1, 11):  # for 10 rounds (AES-128)
        temp = key_schedule[-1]
        temp = [S_BOX[b >> 4][b & 0x0F] for b in temp[1:] + temp[:1]]  # RotWord + SubWord
        temp[0] ^= Rcon[round - 1]  # Rcon[round] XOR the first byte of the word
        key_schedule.append([key_schedule[-4][i] ^ temp[i] for i in range(4)])

        for i in range(1, 4):
            key_schedule.append([key_schedule[-4 + i][j] ^ key_schedule[-4 + i - 1][j] for j in range(4)])

    return key_schedule

# Hàm mã hóa AES
def aes_encrypt(plaintext, key):
    # Convert plaintext into a 4x4 matrix (state)
    state = [list(plaintext[i:i + 4]) for i in range(0, 16, 4)]

    # Key expansion
    key_schedule = key_expansion(key)

    # Initial round key addition
    state = add_round_key(state, key_schedule[:4])

    # 9 rounds of encryption (each consisting of SubBytes, ShiftRows, MixColumns, and AddRoundKey)
    for round in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, key_schedule[round * 4: (round + 1) * 4])

    # Final round (no MixColumns)
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, key_schedule[40:])

    # Convert the state back to a single array
    return [state[i][j] for i in range(4) for j in range(4)]

# Hàm giải mã AES
def aes_decrypt(ciphertext, key):
    # Convert ciphertext into a 4x4 matrix (state)
    state = [list(ciphertext[i:i + 4]) for i in range(0, 16, 4)]

    # Key expansion
    key_schedule = key_expansion(key)

    # Initial round key addition (using the last set of round keys)
    state = add_round_key(state, key_schedule[40:])

    # 9 rounds of decryption (each consisting of Inverse ShiftRows, Inverse SubBytes, AddRoundKey, and Inverse MixColumns)
    for round in range(9, 0, -1):
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)
        state = add_round_key(state, key_schedule[round * 4:(round + 1) * 4])
        state = inv_mix_columns(state)

    # Final round (no Inverse MixColumns)
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)
    state = add_round_key(state, key_schedule[:4])

    # Convert the state back to a single array
    return [state[i][j] for i in range(4) for j in range(4)]


# Example usage
if __name__ == "__main__":
    # AES key and plaintext (16 bytes)
    key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x97, 0x75, 0x46, 0x15, 0x1f, 0x44]
    plaintext = [0x32, 0x88, 0x31, 0xe0, 0x43, 0x5a, 0x31, 0x37, 0xf6, 0x30, 0x98, 0x07, 0xa8, 0x8d, 0xa2, 0x34]

    # Encrypt the plaintext
    ciphertext = aes_encrypt(plaintext, key)
    print("Ciphertext:", ciphertext)

    # Decrypt the ciphertext
    decrypted_text = aes_decrypt(ciphertext, key)
    print("Decrypted text:", decrypted_text)


# Hàm padding, mã hóa và giải mã AES
def pad_data(data, block_size=16):
    padding_len = block_size - (len(data) % block_size)
    return data + bytes([padding_len] * padding_len)

def unpad_data(data):
    padding_len = data[-1]
    return data[:-padding_len]

def encrypt_text(key, text):
    key = key.encode().ljust(16, b'\0')[:16]
    text = text.encode()
    padded_text = pad_data(text)
    ciphertext = b''.join(bytes(aes_encrypt(padded_text[i:i+16], key)) for i in range(0, len(padded_text), 16))
    return ciphertext.hex()

def decrypt_text(key, ciphertext):
    key = key.encode().ljust(16, b'\0')[:16]
    cipher_bytes = bytes.fromhex(ciphertext)
    decrypted_text = b''.join(bytes(aes_decrypt(cipher_bytes[i:i+16], key)) for i in range(0, len(cipher_bytes), 16))
    return unpad_data(decrypted_text).decode()





# Giao diện với PySimpleGUI
layout = [
    [sg.Text("Original text:"), sg.InputText(size=(20, 1), key="text")],
    [sg.Text("Key:"), sg.InputText(size=(20, 1), key="key")],
    [sg.Button("Encrypt"), sg.Button("Decrypt")],
    [sg.Text("Cipher Text:"), sg.InputText(size=(40, 1), key="cipher", readonly=True)],
]


window = sg.Window("AES Encryptor & Decryptor (Manual)", layout)

while True:
    event, values = window.read()
    if event == sg.WINDOW_CLOSED:
        break
    elif event == "Encrypt":
        text = values["text"]
        key = values["key"]
        ciphertext = encrypt_text(key, text)
        window["cipher"].update(ciphertext)
    elif event == "Decrypt":
        cipher_text = values["cipher"]
        key = values["key"]
        decrypted_text = decrypt_text(key, cipher_text)
        window["cipher"].update(decrypted_text)

window.close()
